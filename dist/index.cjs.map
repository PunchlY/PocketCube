{"version":3,"file":"index.cjs","sources":["../src/base.ts","../src/util.ts","../src/build.ts","../src/solve/const.ts","../src/solve/de.ts","../src/rubik.ts"],"sourcesContent":["\r\nconst i8 = Object.freeze([...Array(8).keys()]);\r\nconst noop7 = Object.freeze(Array.from<number>({ length: 7 }));\r\n\r\ntype Li = [number, number, number, number, number, number, number, number];\r\n\r\nfunction MOD(x: number, mod: number) {\r\n    return mod - ((mod - (x % mod)) % mod);\r\n}\r\n\r\nconst FrozenCopy = function (target: any, propertyKey, descriptor) {\r\n    const fn = target[propertyKey];\r\n    if (typeof fn === 'function') return {\r\n        ...descriptor,\r\n        value(this: Rubik) {\r\n            return Reflect.apply(fn, Object.isFrozen(this) ? this.copy() : this, arguments);\r\n        },\r\n    };\r\n} as MethodDecorator;\r\n\r\nclass Rubik {\r\n    declare C: Li;\r\n    declare T: Li;\r\n    static from(position: number) {\r\n        const rubik = new this();\r\n        rubik.position = position;\r\n        return rubik;\r\n    }\r\n    private set(C: Li, T: Li) {\r\n        this.C = C;\r\n        this.T = T;\r\n        return this;\r\n    }\r\n    private _position?: number;\r\n    private setPosition(position: number) {\r\n        const _position = position = MOD(position, 88179840);\r\n        const T: Li = [] as any, C: Li = [] as any;\r\n        T.push((3 - noop7.reduce((p, c = position % 3) => {\r\n            T.push(c);\r\n            position /= 3, position |= 0;\r\n            return p + c;\r\n        }, 0) % 3) % 3);\r\n        i8.forEach(function (this: number[], i) {\r\n            C.push(this.splice(position % (8 - i), 1)[0]);\r\n            position /= 8 - i, position |= 0;\r\n        }, [...i8]);\r\n        this.set(C, T);\r\n        return _position;\r\n    }\r\n    private getPosition() {\r\n        const list = [8];\r\n        return this.T.slice(0, -1).reduceRight((p, c) => p * 3 + c, this.C.reduceRight((p, c, i) => {\r\n            const o = list.findIndex((v) => c < v);\r\n            list.splice(o, 0, c);\r\n            return p * (8 - i) + o;\r\n        }, 0));\r\n    }\r\n\r\n    get position() {\r\n        return this._position ??= this.getPosition();\r\n    }\r\n    set position(position: number) {\r\n        this._position = this.setPosition(position);\r\n    }\r\n    copy() {\r\n        return new Rubik().set([...this.C], [...this.T]);\r\n    }\r\n\r\n    at(i: number) {\r\n        return this.C[i] * 3 + this.T[i];\r\n    }\r\n    find(n: number) {\r\n        const p = this.C.indexOf(((n / 3) | 0) % 8);\r\n        return p * 3 + (3 + (n % 3) - this.T[p]) % 3;\r\n    }\r\n\r\n    @FrozenCopy\r\n    action(...rubiks: (Rubik | Readonly<Rubik>)[]) {\r\n        for (const { C: rC, T: rT } of rubiks) {\r\n            const { C: tC, T: tT } = this.copy();\r\n            rC.forEach((n, i) => {\r\n                this.C[i] = tC[n];\r\n                this.T[i] = (tT[n] + rT[i]) % 3;\r\n            });\r\n        }\r\n        delete this._position;\r\n        return this;\r\n    }\r\n    @FrozenCopy\r\n    inverse() {\r\n        const { C: tC, T: tT } = this.copy();\r\n        tC.forEach((n, i) => {\r\n            this.C[n] = i;\r\n            this.T[n] = (3 - tT[i]) % 3;\r\n        });\r\n        delete this._position;\r\n        return this;\r\n    }\r\n    @FrozenCopy\r\n    image() {\r\n        const { C: tC, T: tT } = this.copy();\r\n        [1, 0, 3, 2, 5, 4, 7, 6].forEach((n, i, a) => {\r\n            this.C[i] = a[tC[n]];\r\n            this.T[i] = (3 - tT[n]) % 3;\r\n        });\r\n        delete this._position;\r\n        return this;\r\n    }\r\n}\r\n\r\nexport { Rubik };\r\n","import { Rubik } from './base.js';\r\n\r\ntype Trun = Readonly<Rubik>;\r\ntype Layer = [Trun, Trun, Trun];\r\n\r\nfunction Trun(p: number) {\r\n    return Object.freeze(Rubik.from(p));\r\n}\r\nconst Base = [\r\n    0, 16219978, 2469029,\r\n    33104619, 17954269, 49605440,\r\n    51565086, 34630144, 3470675,\r\n    84669705, 36364435, 50607086,\r\n    18222084, 52672894, 36822425,\r\n    51396687, 70206073, 38451740,\r\n    40288914, 53569564, 84835823,\r\n    73463517, 71102743, 86465138,\r\n].map(Trun);\r\nconst BaseT = Base.map((CT) => Base[CT.find(0)]);\r\nconst _Base = Array.from({ length: 8 }, (_, i) => [...Base].sort((c1, c2) => c1.at(i) - c2.at(i)));\r\nconst [X, Y, Z] = [\r\n    [14, 18, 8],\r\n    [6, 9, 3],\r\n    [4, 15, 13],\r\n].map((a) => a.map((n) => Base[n]) as Layer);\r\nconst [R, U, F, L, D, B] = [\r\n    [77350359, 68566824, 50861415],\r\n    [51438240, 84505680, 33067440],\r\n    [21433374, 84383208, 62951382],\r\n    [15944780, 20238498, 22807586],\r\n    [37179, 164025, 126846],\r\n    [4540624, 5469687, 929887],\r\n].map((T) => T.map(Trun) as Layer);\r\n\r\nfunction fix(rubik: Rubik, base: number) {\r\n    return Base[base].action(rubik, BaseT[base]);\r\n}\r\n\r\nfunction* _congruent(rawRubik: Rubik | Readonly<Rubik>, set: Set<number>, p?: number, c?: number) {\r\n    for (const base of Base) {\r\n        const baseRubik = Object.freeze(base.action(rawRubik));\r\n        for (const coordinate of p === null || p === undefined ? Base : [_Base[p][baseRubik.find(c ?? p * 3)]]) {\r\n            const rubik = baseRubik.action(coordinate);\r\n            const pos = rubik.position;\r\n            if (set.has(pos)) continue;\r\n            set.add(pos);\r\n            yield { rubik, base, coordinate, position: pos };\r\n        }\r\n    }\r\n}\r\nfunction* congruent(rawRubik: Rubik | Readonly<Rubik>, p?: number, c?: number) {\r\n    yield* _congruent(rawRubik, new Set(), p, c);\r\n}\r\nfunction* similarly(rawRubik: Rubik | Readonly<Rubik>, n: number, p?: number, c?: number) {\r\n    const set = new Set<number>();\r\n    for (const [t, rubik] of [\r\n        (n & 1) && rawRubik,\r\n        (n & 2) && rawRubik.copy().image(),\r\n        (n & 4) && rawRubik.copy().inverse(),\r\n        (n & 8) && rawRubik.copy().image().inverse(),\r\n    ].entries()) {\r\n        if (!rubik) continue;\r\n        if (set.has(rubik.position)) continue;\r\n        for (const data of _congruent(rubik, set, p, c))\r\n            yield { ...data, image: !!(t & 1), inverse: !!(t & 2) };\r\n    }\r\n}\r\n\r\nconst Turns = [\r\n    ...R, ...U, ...F,\r\n    ...L, ...D, ...B,\r\n    ...X, ...Y, ...Z,\r\n];\r\nenum TurnNames {\r\n    'R', 'R2', 'R\\'',\r\n    'U', 'U2', 'U\\'',\r\n    'F', 'F2', 'F\\'',\r\n    'L', 'L2', 'L\\'',\r\n    'D', 'D2', 'D\\'',\r\n    'B', 'B2', 'B\\'',\r\n    'X', 'X2', 'X\\'',\r\n    'Y', 'Y2', 'Y\\'',\r\n    'Z', 'Z2', 'Z\\'',\r\n}\r\n\r\nfunction* StringToTrunsIndex(str: string) {\r\n    for (const [name] of String.prototype.matchAll.call(str, /[RUFLDBXYZ]['2]?/g))\r\n        yield TurnNames[name as any] as unknown as number;\r\n}\r\nfunction* StringToTruns(str: string) {\r\n    for (const index of StringToTrunsIndex(str))\r\n        yield Turns[index];\r\n}\r\n\r\nexport { fix };\r\nexport { congruent, similarly };\r\n\r\nexport { Turns, TurnNames, StringToTrunsIndex, StringToTruns };\r\n\r\nexport { Base, BaseT };\r\nexport { X, Y, Z, R, U, F, L, D, B };\r\n\r\nexport type { Trun, Layer };\r\n","import { Base, TurnNames, Turns, StringToTrunsIndex } from './util.js';\r\n\r\nconst Position: Record<number, number> = Object.fromEntries(Turns.map(({ position }, i) => [position, i]));\r\n\r\nconst Image_Graph = [\r\n    11, 10, 9,\r\n    5, 4, 3,\r\n    8, 7, 6,\r\n    2, 1, 0,\r\n    14, 13, 12,\r\n    17, 16, 15,\r\n    18, 19, 20,\r\n    23, 22, 21,\r\n    26, 25, 24,\r\n];\r\nconst Inverse_Graph = [\r\n    2, 1, 0,\r\n    5, 4, 3,\r\n    8, 7, 6,\r\n    11, 10, 9,\r\n    14, 13, 12,\r\n    17, 16, 15,\r\n    20, 19, 18,\r\n    23, 22, 21,\r\n    26, 25, 24,\r\n];\r\nconst Base_GraphList = [\r\n    [0, 1, 2, 3, 4, 5], [1, 2, 0, 4, 5, 3], [2, 0, 1, 5, 3, 4],\r\n    [2, 1, 3, 5, 4, 0], [1, 3, 2, 4, 0, 5], [3, 2, 1, 0, 5, 4],\r\n    [5, 1, 0, 2, 4, 3], [1, 0, 5, 4, 3, 2], [0, 5, 1, 3, 2, 4],\r\n    [3, 1, 5, 0, 4, 2], [1, 5, 3, 4, 2, 0], [5, 3, 1, 2, 0, 4],\r\n    [2, 4, 0, 5, 1, 3], [4, 0, 2, 1, 3, 5], [0, 2, 4, 3, 5, 1],\r\n    [3, 4, 2, 0, 1, 5], [4, 2, 3, 1, 5, 0], [2, 3, 4, 5, 0, 1],\r\n    [0, 4, 5, 3, 1, 2], [4, 5, 0, 1, 2, 3], [5, 0, 4, 2, 3, 1],\r\n    [5, 4, 3, 2, 1, 0], [4, 3, 5, 1, 0, 2], [3, 5, 4, 0, 2, 1],\r\n].map((g) =>\r\n    [...g, ...g.slice(0, 3).map((v) => v + 6)]\r\n        .flatMap((v) => [v * 3, v * 3 + 1, v * 3 + 2])\r\n);\r\n\r\nconst base_c_cT = Array.from({ length: 24 }, (_v, i) => Base.map((c) => c.find(i)));\r\nconst base_cT = base_c_cT[0];\r\nconst base_ccT = base_c_cT.map((l, i) => l[i]);\r\nconst base_turnT = [\r\n    8, 18, 14,\r\n    3, 9, 6,\r\n    13, 15, 4,\r\n    14, 18, 8,\r\n    6, 9, 3,\r\n    4, 15, 13,\r\n];\r\n\r\nfunction map(data: number[], graph: number[]) {\r\n    data.forEach((v, i) => data[i] = graph[v]);\r\n}\r\n\r\nclass Build {\r\n    #data!: number[];\r\n    static from(data: number[] | string) {\r\n        const build = new Build();\r\n        if (typeof data === 'string')\r\n            build.#data = [...StringToTrunsIndex(data)];\r\n        else\r\n            build.#data = data;\r\n        return build;\r\n    }\r\n\r\n    base(base: number) {\r\n        map(this.#data, Base_GraphList[base]);\r\n        return this;\r\n    }\r\n    coordinate(coordinate: number) {\r\n        map(this.#data, Base_GraphList[base_cT[coordinate]]);\r\n        return this;\r\n    }\r\n    similar(base: number) {\r\n        map(this.#data, Base_GraphList[base]);\r\n        map(this.#data, Base_GraphList[base_ccT[base]]);\r\n        return this;\r\n    }\r\n    image() {\r\n        map(this.#data, Image_Graph);\r\n        return this;\r\n    }\r\n    inverse() {\r\n        map(this.#data.reverse(), Inverse_Graph);\r\n        return this;\r\n    }\r\n    bits(t: number) {\r\n        let graph = 0;\r\n        Array.from({ length: this.#data.length },\r\n            (v: number = t & 1) => (t >>= 1, v)\r\n        ).forEach((b, i) => {\r\n            let v = this.#data[i];\r\n            v = Base_GraphList[graph]?.[v] ?? v;\r\n            if (v >= 18) return this.#data[i] = v;\r\n            if (b ^ (~~(v / 9))) graph = base_c_cT[graph][base_turnT[v]];\r\n            this.#data[i] = b * 9 + v % 9;\r\n        });\r\n        return this;\r\n    }\r\n    valueOf() {\r\n        return this.#data;\r\n    }\r\n    toString() {\r\n        return this.#data.map((v) => TurnNames[v]).join('');\r\n    }\r\n}\r\n\r\nexport { Build, Position };\r\n","\r\nexport const chs = Reflect.apply(String.fromCharCode, String, [\r\n    32, 33,/* 34,*/ 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\r\n    48, 49, 50, 51, 52, 53, 54, 55, 56, 57,\r\n    58, 59, 60, 61, 62, 63, 64,\r\n    65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,\r\n    91,/* 92,*/ 93, 94, 95, 96,\r\n    97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122,\r\n    123, 124, 125, 126,\r\n]);\r\nexport const mlength = Math.ceil(Math.log(88179840) / Math.log(chs.length));\r\n","import { chs, mlength } from './const.js';\r\nimport { map, sBuild, pos } from 'solvedata.min.json';\r\n\r\nconst { length } = chs;\r\nconst tab = Object.fromEntries([...chs].map((v, i) => [v, i]));\r\n\r\nfunction aton(s: string) {\r\n    return [...s].reduceRight((p, c) => p * length + tab[c], 0);\r\n}\r\nfunction* dsplit(s: string, x: number, y: number) {\r\n    for (let i = 0; i < s.length; i += x + y)\r\n        yield [s.slice(i, i + x), s.slice(i + x, i + x + y)];\r\n};\r\n\r\nconst mapL = map.length + 1;\r\nconst data = Object.fromEntries(function* () {\r\n    let _sBuild = sBuild;\r\n    for (const [length, i] of pos) {\r\n        const kl = (i % mlength) + 1, vl = ~~(i / mlength) + 1, dl = kl + vl, l = length * dl;\r\n        for (const [k, v] of dsplit(_sBuild.slice(0, l), kl, vl))\r\n            yield [aton(k), Object.freeze(vfn(v))];\r\n        _sBuild = _sBuild.slice(l);\r\n    }\r\n}());\r\ndata[0] = [];\r\n\r\nexport default {\r\n    map: Object.freeze(map.map(aton)),\r\n    build: Object.freeze(data)\r\n};\r\n\r\nfunction vfn(v: string) {\r\n    return [...(function* (n) {\r\n        do { yield (n % mapL) - 1; } while ((n = Math.floor(n / mapL)));\r\n    })(aton(v))];\r\n}\r\n","import { similarly, TurnNames, Base, StringToTruns, congruent } from './util.js';\r\nimport { Rubik as BaseRubik } from './base.js';\r\nimport { Build, Position } from './build.js';\r\nimport solvedata from 'solvedata.json';\r\n\r\nfunction solve(rubik: BaseRubik) {\r\n    const { map, build } = solvedata;\r\n    for (let { rubik: { position }, image, inverse, base, coordinate } of similarly(rubik, 15)) {\r\n        if (!(position in build))\r\n            continue;\r\n        // @ts-ignore\r\n        const solve = Build.from(build[position].map((v) => Position[map[v]]));\r\n        if (inverse) {\r\n            base = base.inverse();\r\n        } else {\r\n            solve.inverse();\r\n            base = coordinate;\r\n        }\r\n        if (image) {\r\n            solve.image();\r\n            base = base.image();\r\n        }\r\n        return solve.base(base.at(0));\r\n    }\r\n    return false;\r\n}\r\n\r\nclass Rubik {\r\n    #data = BaseRubik.from(0);\r\n    static *#toBaseRubik(rubiks: (Rubik | string)[]) {\r\n        for (const rubik of rubiks) {\r\n            if (rubik instanceof Rubik)\r\n                yield rubik.#data;\r\n            else\r\n                yield* StringToTruns(rubik);\r\n        }\r\n    }\r\n    static from(position: number) {\r\n        const rubik = new this();\r\n        rubik.#data = BaseRubik.from(position);\r\n        return rubik;\r\n    }\r\n    get position() {\r\n        return this.#data.position;\r\n    }\r\n    isReinstated() {\r\n        const { C, T } = Base[this.#data.at(0)];\r\n        for (const i of C.keys()) if (\r\n            this.#data.C[i] !== C[i] ||\r\n            this.#data.T[i] !== T[i]\r\n        ) return false;\r\n        return true;\r\n    }\r\n    *similarly(n: number, p?: number, c?: number) {\r\n        for (const { rubik: baseRubik, image, inverse, base, coordinate } of similarly(this.#data, n, p, c)) {\r\n            const rubik = new Rubik();\r\n            rubik.#data = baseRubik;\r\n            yield {\r\n                rubik,\r\n                image,\r\n                inverse,\r\n                base: base.at(0),\r\n                coordinate: coordinate.at(0),\r\n            };\r\n        }\r\n    }\r\n    *congruent(p?: number, c?: number) {\r\n        for (const { rubik: baseRubik, base, coordinate } of congruent(this.#data, p, c)) {\r\n            const rubik = new Rubik();\r\n            rubik.#data = baseRubik;\r\n            yield {\r\n                rubik,\r\n                base: base.at(0),\r\n                coordinate: coordinate.at(0),\r\n            };\r\n        }\r\n    }\r\n    copy() {\r\n        const rubik = new Rubik();\r\n        rubik.#data = this.#data.copy();\r\n        return rubik;\r\n    }\r\n    at(i: number) {\r\n        return this.#data.at(i);\r\n    }\r\n    find(n: number) {\r\n        return this.#data.find(n);\r\n    }\r\n    action(...rubiks: (Rubik | keyof typeof TurnNames)[]): this;\r\n    action(...rubiks: (Rubik | string)[]): this;\r\n    action(...rubiks: (Rubik | string)[]) {\r\n        Reflect.apply(BaseRubik.prototype.action, this.#data, [...Rubik.#toBaseRubik(rubiks)]);\r\n        return this;\r\n    }\r\n    inverse() {\r\n        this.#data.inverse();\r\n        return this;\r\n    }\r\n    image() {\r\n        this.#data.image();\r\n        return this;\r\n    }\r\n    solve(bit?: number) {\r\n        const build = solve(this.#data);\r\n        if (!build) return false;\r\n        if (arguments.length) build.bits(bit!);\r\n        return build.toString();\r\n    }\r\n}\r\n\r\nexport { Rubik, Rubik as default };\r\n"],"names":["i8","noop7","MOD","x","mod","FrozenCopy","target","propertyKey","descriptor","fn","_Rubik","__publicField","position","rubik","C","T","_position","p","c","i","list","o","v","n","rubiks","rC","rT","tC","tT","a","__decorateClass","Rubik","Trun","Base","CT","_Base","_","c1","c2","X","Y","Z","R","U","F","L","D","B","_congruent","rawRubik","set","base","baseRubik","coordinate","pos","congruent","similarly","t","data","Turns","TurnNames","TurnNames2","StringToTrunsIndex","str","name","StringToTruns","index","Position","Image_Graph","Inverse_Graph","Base_GraphList","g","base_c_cT","_v","base_cT","base_ccT","l","base_turnT","map","graph","_Build","__privateAdd","_data","build","__privateSet","__privateGet","b","_a","Build","chs","mlength","length","tab","aton","s","dsplit","y","mapL","_sBuild","sBuild","kl","vl","dl","k","vfn","solvedata","solve","image","inverse","BaseRubik","__privateMethod","_toBaseRubik","toBaseRubik_fn","bit"],"mappings":"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"}