{"version":3,"file":"index.js","sources":["../src/base.ts","../src/util.ts","../src/build.ts","../src/solve/const.ts","../src/solve/de.ts","../src/rubik.ts"],"sourcesContent":["\r\nconst i8 = Object.freeze([...Array(8).keys()]);\r\nconst noop7 = Object.freeze(Array.from<number>({ length: 7 }));\r\n\r\ntype Li = [number, number, number, number, number, number, number, number];\r\n\r\nfunction MOD(x: number, mod: number) {\r\n    return mod - ((mod - (x % mod)) % mod);\r\n}\r\n\r\nconst FrozenCopy = function (target: any, propertyKey, descriptor) {\r\n    const fn = target[propertyKey];\r\n    if (typeof fn === 'function') return {\r\n        ...descriptor,\r\n        value(this: Rubik) {\r\n            return Reflect.apply(fn, Object.isFrozen(this) ? this.copy() : this, arguments);\r\n        },\r\n    };\r\n} as MethodDecorator;\r\n\r\nclass Rubik {\r\n    declare C: Li;\r\n    declare T: Li;\r\n    static from(position: number) {\r\n        const rubik = new this();\r\n        rubik.position = position;\r\n        return rubik;\r\n    }\r\n    private set(C: Li, T: Li) {\r\n        this.C = C;\r\n        this.T = T;\r\n        return this;\r\n    }\r\n    private _position?: number;\r\n    private setPosition(position: number) {\r\n        const _position = position = MOD(position, 88179840);\r\n        const T: Li = [] as any, C: Li = [] as any;\r\n        T.push((3 - noop7.reduce((p, c = position % 3) => {\r\n            T.push(c);\r\n            position /= 3, position |= 0;\r\n            return p + c;\r\n        }, 0) % 3) % 3);\r\n        i8.forEach(function (this: number[], i) {\r\n            C.push(this.splice(position % (8 - i), 1)[0]);\r\n            position /= 8 - i, position |= 0;\r\n        }, [...i8]);\r\n        this.set(C, T);\r\n        return _position;\r\n    }\r\n    private getPosition() {\r\n        const list = [8];\r\n        return this.T.slice(0, -1).reduceRight((p, c) => p * 3 + c, this.C.reduceRight((p, c, i) => {\r\n            const o = list.findIndex((v) => c < v);\r\n            list.splice(o, 0, c);\r\n            return p * (8 - i) + o;\r\n        }, 0));\r\n    }\r\n\r\n    get position() {\r\n        return this._position ??= this.getPosition();\r\n    }\r\n    set position(position: number) {\r\n        this._position = this.setPosition(position);\r\n    }\r\n    copy() {\r\n        return new Rubik().set([...this.C], [...this.T]);\r\n    }\r\n\r\n    at(i: number) {\r\n        return this.C[i] * 3 + this.T[i];\r\n    }\r\n    find(n: number) {\r\n        const p = this.C.indexOf(((n / 3) | 0) % 8);\r\n        return p * 3 + (3 + (n % 3) - this.T[p]) % 3;\r\n    }\r\n\r\n    @FrozenCopy\r\n    action(...rubiks: (Rubik | Readonly<Rubik>)[]) {\r\n        for (const { C: rC, T: rT } of rubiks) {\r\n            const { C: tC, T: tT } = this.copy();\r\n            rC.forEach((n, i) => {\r\n                this.C[i] = tC[n];\r\n                this.T[i] = (tT[n] + rT[i]) % 3;\r\n            });\r\n        }\r\n        delete this._position;\r\n        return this;\r\n    }\r\n    @FrozenCopy\r\n    inverse() {\r\n        const { C: tC, T: tT } = this.copy();\r\n        tC.forEach((n, i) => {\r\n            this.C[n] = i;\r\n            this.T[n] = (3 - tT[i]) % 3;\r\n        });\r\n        delete this._position;\r\n        return this;\r\n    }\r\n    @FrozenCopy\r\n    image() {\r\n        const { C: tC, T: tT } = this.copy();\r\n        [1, 0, 3, 2, 5, 4, 7, 6].forEach((n, i, a) => {\r\n            this.C[i] = a[tC[n]];\r\n            this.T[i] = (3 - tT[n]) % 3;\r\n        });\r\n        delete this._position;\r\n        return this;\r\n    }\r\n}\r\n\r\nexport { Rubik };\r\n","import { Rubik } from './base.js';\r\n\r\ntype Trun = Readonly<Rubik>;\r\ntype Layer = [Trun, Trun, Trun];\r\n\r\nfunction Trun(p: number) {\r\n    return Object.freeze(Rubik.from(p));\r\n}\r\nconst Base = [\r\n    0, 16219978, 2469029,\r\n    33104619, 17954269, 49605440,\r\n    51565086, 34630144, 3470675,\r\n    84669705, 36364435, 50607086,\r\n    18222084, 52672894, 36822425,\r\n    51396687, 70206073, 38451740,\r\n    40288914, 53569564, 84835823,\r\n    73463517, 71102743, 86465138,\r\n].map(Trun);\r\nconst BaseT = Base.map((CT) => Base[CT.find(0)]);\r\nconst _Base = Array.from({ length: 8 }, (_, i) => [...Base].sort((c1, c2) => c1.at(i) - c2.at(i)));\r\nconst [X, Y, Z] = [\r\n    [14, 18, 8],\r\n    [6, 9, 3],\r\n    [4, 15, 13],\r\n].map((a) => a.map((n) => Base[n]) as Layer);\r\nconst [R, U, F, L, D, B] = [\r\n    [77350359, 68566824, 50861415],\r\n    [51438240, 84505680, 33067440],\r\n    [21433374, 84383208, 62951382],\r\n    [15944780, 20238498, 22807586],\r\n    [37179, 164025, 126846],\r\n    [4540624, 5469687, 929887],\r\n].map((T) => T.map(Trun) as Layer);\r\n\r\nfunction fix(rubik: Rubik, base: number) {\r\n    return Base[base].action(rubik, BaseT[base]);\r\n}\r\n\r\nfunction* _congruent(rawRubik: Rubik | Readonly<Rubik>, set: Set<number>, p?: number, c?: number) {\r\n    for (const base of Base) {\r\n        const baseRubik = Object.freeze(base.action(rawRubik));\r\n        for (const coordinate of p === null || p === undefined ? Base : [_Base[p][baseRubik.find(c ?? p * 3)]]) {\r\n            const rubik = baseRubik.action(coordinate);\r\n            const pos = rubik.position;\r\n            if (set.has(pos)) continue;\r\n            set.add(pos);\r\n            yield { rubik, base, coordinate, position: pos };\r\n        }\r\n    }\r\n}\r\nfunction* congruent(rawRubik: Rubik | Readonly<Rubik>, p?: number, c?: number) {\r\n    yield* _congruent(rawRubik, new Set(), p, c);\r\n}\r\nfunction* similarly(rawRubik: Rubik | Readonly<Rubik>, n: number, p?: number, c?: number) {\r\n    const set = new Set<number>();\r\n    for (const [t, rubik] of [\r\n        (n & 1) && rawRubik,\r\n        (n & 2) && rawRubik.copy().image(),\r\n        (n & 4) && rawRubik.copy().inverse(),\r\n        (n & 8) && rawRubik.copy().image().inverse(),\r\n    ].entries()) {\r\n        if (!rubik) continue;\r\n        if (set.has(rubik.position)) continue;\r\n        for (const data of _congruent(rubik, set, p, c))\r\n            yield { ...data, image: !!(t & 1), inverse: !!(t & 2) };\r\n    }\r\n}\r\n\r\nconst Turns = [\r\n    ...R, ...U, ...F,\r\n    ...L, ...D, ...B,\r\n    ...X, ...Y, ...Z,\r\n];\r\nenum TurnNames {\r\n    'R', 'R2', 'R\\'',\r\n    'U', 'U2', 'U\\'',\r\n    'F', 'F2', 'F\\'',\r\n    'L', 'L2', 'L\\'',\r\n    'D', 'D2', 'D\\'',\r\n    'B', 'B2', 'B\\'',\r\n    'X', 'X2', 'X\\'',\r\n    'Y', 'Y2', 'Y\\'',\r\n    'Z', 'Z2', 'Z\\'',\r\n}\r\n\r\nfunction* StringToTrunsIndex(str: string) {\r\n    for (const [name] of String.prototype.matchAll.call(str, /[RUFLDBXYZ]['2]?/g))\r\n        yield TurnNames[name as any] as unknown as number;\r\n}\r\nfunction* StringToTruns(str: string) {\r\n    for (const index of StringToTrunsIndex(str))\r\n        yield Turns[index];\r\n}\r\n\r\nexport { fix };\r\nexport { congruent, similarly };\r\n\r\nexport { Turns, TurnNames, StringToTrunsIndex, StringToTruns };\r\n\r\nexport { Base, BaseT };\r\nexport { X, Y, Z, R, U, F, L, D, B };\r\n\r\nexport type { Trun, Layer };\r\n","import { Base, TurnNames, Turns, StringToTrunsIndex } from './util.js';\r\n\r\nconst Position: Record<number, number> = Object.fromEntries(Turns.map(({ position }, i) => [position, i]));\r\n\r\nconst Image_Graph = [\r\n    11, 10, 9,\r\n    5, 4, 3,\r\n    8, 7, 6,\r\n    2, 1, 0,\r\n    14, 13, 12,\r\n    17, 16, 15,\r\n    18, 19, 20,\r\n    23, 22, 21,\r\n    26, 25, 24,\r\n];\r\nconst Inverse_Graph = [\r\n    2, 1, 0,\r\n    5, 4, 3,\r\n    8, 7, 6,\r\n    11, 10, 9,\r\n    14, 13, 12,\r\n    17, 16, 15,\r\n    20, 19, 18,\r\n    23, 22, 21,\r\n    26, 25, 24,\r\n];\r\nconst Base_GraphList = [\r\n    [0, 1, 2, 3, 4, 5], [1, 2, 0, 4, 5, 3], [2, 0, 1, 5, 3, 4],\r\n    [2, 1, 3, 5, 4, 0], [1, 3, 2, 4, 0, 5], [3, 2, 1, 0, 5, 4],\r\n    [5, 1, 0, 2, 4, 3], [1, 0, 5, 4, 3, 2], [0, 5, 1, 3, 2, 4],\r\n    [3, 1, 5, 0, 4, 2], [1, 5, 3, 4, 2, 0], [5, 3, 1, 2, 0, 4],\r\n    [2, 4, 0, 5, 1, 3], [4, 0, 2, 1, 3, 5], [0, 2, 4, 3, 5, 1],\r\n    [3, 4, 2, 0, 1, 5], [4, 2, 3, 1, 5, 0], [2, 3, 4, 5, 0, 1],\r\n    [0, 4, 5, 3, 1, 2], [4, 5, 0, 1, 2, 3], [5, 0, 4, 2, 3, 1],\r\n    [5, 4, 3, 2, 1, 0], [4, 3, 5, 1, 0, 2], [3, 5, 4, 0, 2, 1],\r\n].map((g) =>\r\n    [...g, ...g.slice(0, 3).map((v) => v + 6)]\r\n        .flatMap((v) => [v * 3, v * 3 + 1, v * 3 + 2])\r\n);\r\n\r\nconst base_c_cT = Array.from({ length: 24 }, (_v, i) => Base.map((c) => c.find(i)));\r\nconst base_cT = base_c_cT[0];\r\nconst base_ccT = base_c_cT.map((l, i) => l[i]);\r\nconst base_turnT = [\r\n    8, 18, 14,\r\n    3, 9, 6,\r\n    13, 15, 4,\r\n    14, 18, 8,\r\n    6, 9, 3,\r\n    4, 15, 13,\r\n];\r\n\r\nfunction map(data: number[], graph: number[]) {\r\n    data.forEach((v, i) => data[i] = graph[v]);\r\n}\r\n\r\nclass Build {\r\n    #data!: number[];\r\n    static from(data: number[] | string) {\r\n        const build = new Build();\r\n        if (typeof data === 'string')\r\n            build.#data = [...StringToTrunsIndex(data)];\r\n        else\r\n            build.#data = data;\r\n        return build;\r\n    }\r\n\r\n    base(base: number) {\r\n        map(this.#data, Base_GraphList[base]);\r\n        return this;\r\n    }\r\n    coordinate(coordinate: number) {\r\n        map(this.#data, Base_GraphList[base_cT[coordinate]]);\r\n        return this;\r\n    }\r\n    similar(base: number) {\r\n        map(this.#data, Base_GraphList[base]);\r\n        map(this.#data, Base_GraphList[base_ccT[base]]);\r\n        return this;\r\n    }\r\n    image() {\r\n        map(this.#data, Image_Graph);\r\n        return this;\r\n    }\r\n    inverse() {\r\n        map(this.#data.reverse(), Inverse_Graph);\r\n        return this;\r\n    }\r\n    bits(t: number) {\r\n        let graph = 0;\r\n        Array.from({ length: this.#data.length },\r\n            (v: number = t & 1) => (t >>= 1, v)\r\n        ).forEach((b, i) => {\r\n            let v = this.#data[i];\r\n            v = Base_GraphList[graph]?.[v] ?? v;\r\n            if (v >= 18) return this.#data[i] = v;\r\n            if (b ^ (~~(v / 9))) graph = base_c_cT[graph][base_turnT[v]];\r\n            this.#data[i] = b * 9 + v % 9;\r\n        });\r\n        return this;\r\n    }\r\n    valueOf() {\r\n        return this.#data;\r\n    }\r\n    toString() {\r\n        return this.#data.map((v) => TurnNames[v]).join('');\r\n    }\r\n}\r\n\r\nexport { Build, Position };\r\n","\r\nexport const chs = Reflect.apply(String.fromCharCode, String, [\r\n    32, 33,/* 34,*/ 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\r\n    48, 49, 50, 51, 52, 53, 54, 55, 56, 57,\r\n    58, 59, 60, 61, 62, 63, 64,\r\n    65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,\r\n    91,/* 92,*/ 93, 94, 95, 96,\r\n    97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122,\r\n    123, 124, 125, 126,\r\n]);\r\nexport const mlength = Math.ceil(Math.log(88179840) / Math.log(chs.length));\r\n","import { chs, mlength } from './const.js';\r\nimport { map, sBuild, pos } from 'solvedata.min.json';\r\n\r\nconst { length } = chs;\r\nconst tab = Object.fromEntries([...chs].map((v, i) => [v, i]));\r\n\r\nfunction aton(s: string) {\r\n    return [...s].reduceRight((p, c) => p * length + tab[c], 0);\r\n}\r\nfunction* dsplit(s: string, x: number, y: number) {\r\n    for (let i = 0; i < s.length; i += x + y)\r\n        yield [s.slice(i, i + x), s.slice(i + x, i + x + y)];\r\n};\r\n\r\nconst mapL = map.length + 1;\r\nconst data = Object.fromEntries(function* () {\r\n    let _sBuild = sBuild;\r\n    for (const [length, i] of pos) {\r\n        const kl = (i % mlength) + 1, vl = ~~(i / mlength) + 1, dl = kl + vl, l = length * dl;\r\n        for (const [k, v] of dsplit(_sBuild.slice(0, l), kl, vl))\r\n            yield [aton(k), Object.freeze(vfn(v))];\r\n        _sBuild = _sBuild.slice(l);\r\n    }\r\n}());\r\ndata[0] = [];\r\n\r\nexport default {\r\n    map: Object.freeze(map.map(aton)),\r\n    build: Object.freeze(data)\r\n};\r\n\r\nfunction vfn(v: string) {\r\n    return [...(function* (n) {\r\n        do { yield (n % mapL) - 1; } while ((n = Math.floor(n / mapL)));\r\n    })(aton(v))];\r\n}\r\n","import { similarly, TurnNames, Base, StringToTruns, congruent } from './util.js';\r\nimport { Rubik as BaseRubik } from './base.js';\r\nimport { Build, Position } from './build.js';\r\nimport solvedata from 'solvedata.json';\r\n\r\nfunction solve(rubik: BaseRubik) {\r\n    const { map, build } = solvedata;\r\n    for (let { rubik: { position }, image, inverse, base, coordinate } of similarly(rubik, 15)) {\r\n        if (!(position in build))\r\n            continue;\r\n        // @ts-ignore\r\n        const solve = Build.from(build[position].map((v) => Position[map[v]]));\r\n        if (inverse) {\r\n            base = base.inverse();\r\n        } else {\r\n            solve.inverse();\r\n            base = coordinate;\r\n        }\r\n        if (image) {\r\n            solve.image();\r\n            base = base.image();\r\n        }\r\n        return solve.base(base.at(0));\r\n    }\r\n    return false;\r\n}\r\n\r\nclass Rubik {\r\n    #data = BaseRubik.from(0);\r\n    static *#toBaseRubik(rubiks: (Rubik | string)[]) {\r\n        for (const rubik of rubiks) {\r\n            if (rubik instanceof Rubik)\r\n                yield rubik.#data;\r\n            else\r\n                yield* StringToTruns(rubik);\r\n        }\r\n    }\r\n    static from(position: number) {\r\n        const rubik = new this();\r\n        rubik.#data = BaseRubik.from(position);\r\n        return rubik;\r\n    }\r\n    get position() {\r\n        return this.#data.position;\r\n    }\r\n    isReinstated() {\r\n        const { C, T } = Base[this.#data.at(0)];\r\n        for (const i of C.keys()) if (\r\n            this.#data.C[i] !== C[i] ||\r\n            this.#data.T[i] !== T[i]\r\n        ) return false;\r\n        return true;\r\n    }\r\n    *similarly(n: number, p?: number, c?: number) {\r\n        for (const { rubik: baseRubik, image, inverse, base, coordinate } of similarly(this.#data, n, p, c)) {\r\n            const rubik = new Rubik();\r\n            rubik.#data = baseRubik;\r\n            yield {\r\n                rubik,\r\n                image,\r\n                inverse,\r\n                base: base.at(0),\r\n                coordinate: coordinate.at(0),\r\n            };\r\n        }\r\n    }\r\n    *congruent(p?: number, c?: number) {\r\n        for (const { rubik: baseRubik, base, coordinate } of congruent(this.#data, p, c)) {\r\n            const rubik = new Rubik();\r\n            rubik.#data = baseRubik;\r\n            yield {\r\n                rubik,\r\n                base: base.at(0),\r\n                coordinate: coordinate.at(0),\r\n            };\r\n        }\r\n    }\r\n    copy() {\r\n        const rubik = new Rubik();\r\n        rubik.#data = this.#data.copy();\r\n        return rubik;\r\n    }\r\n    at(i: number) {\r\n        return this.#data.at(i);\r\n    }\r\n    find(n: number) {\r\n        return this.#data.find(n);\r\n    }\r\n    action(...rubiks: (Rubik | keyof typeof TurnNames)[]): this;\r\n    action(...rubiks: (Rubik | string)[]): this;\r\n    action(...rubiks: (Rubik | string)[]) {\r\n        Reflect.apply(BaseRubik.prototype.action, this.#data, [...Rubik.#toBaseRubik(rubiks)]);\r\n        return this;\r\n    }\r\n    inverse() {\r\n        this.#data.inverse();\r\n        return this;\r\n    }\r\n    image() {\r\n        this.#data.image();\r\n        return this;\r\n    }\r\n    solve(bit?: number) {\r\n        const build = solve(this.#data);\r\n        if (!build) return false;\r\n        if (arguments.length) build.bits(bit!);\r\n        return build.toString();\r\n    }\r\n}\r\n\r\nexport { Rubik, Rubik as default };\r\n"],"names":["i8","noop7","MOD","x","mod","FrozenCopy","target","propertyKey","descriptor","fn","_Rubik","__publicField","position","rubik","C","T","_position","p","c","i","list","o","v","n","rubiks","rC","rT","tC","tT","a","__decorateClass","Rubik","Trun","Base","CT","_Base","_","c1","c2","X","Y","Z","R","U","F","L","D","B","_congruent","rawRubik","set","base","baseRubik","coordinate","pos","congruent","similarly","t","data","Turns","TurnNames","TurnNames2","StringToTrunsIndex","str","name","StringToTruns","index","Position","Image_Graph","Inverse_Graph","Base_GraphList","g","base_c_cT","_v","base_cT","base_ccT","l","base_turnT","map","graph","_Build","__privateAdd","_data","build","__privateSet","__privateGet","b","_a","Build","chs","mlength","length","tab","aton","s","dsplit","y","mapL","_sBuild","sBuild","kl","vl","dl","k","vfn","solvedata","solve","image","inverse","BaseRubik","__privateMethod","_toBaseRubik","toBaseRubik_fn","bit"],"mappings":";;;;;;;;;;;;;;;;;AACA,MAAMA,IAAK,OAAO,OAAO,CAAC,GAAG,MAAM,CAAC,EAAE,KAAM,CAAA,CAAC,GACvCC,IAAQ,OAAO,OAAO,MAAM,KAAa,EAAE,QAAQ,EAAG,CAAA,CAAC;AAI7D,SAASC,EAAIC,GAAWC,GAAa;AAC1B,SAAAA,KAAQA,IAAOD,IAAIC,KAAQA;AACtC;AAEA,MAAMC,IAAa,SAAUC,GAAaC,GAAaC,GAAY;AACzD,QAAAC,IAAKH,EAAOC,CAAW;AAC7B,MAAI,OAAOE,KAAO;AAAmB,WAAA;AAAA,MACjC,GAAGD;AAAA,MACH,QAAmB;AACR,eAAA,QAAQ,MAAMC,GAAI,OAAO,SAAS,IAAI,IAAI,KAAK,KAAA,IAAS,MAAM,SAAS;AAAA,MAClF;AAAA,IAAA;AAER,GAEMC,IAAN,MAAMA,EAAM;AAAA,EAAZ;AAaY,IAAAC,EAAA;AAAA;AAAA,EAVR,OAAO,KAAKC,GAAkB;AACpB,UAAAC,IAAQ,IAAI;AAClB,WAAAA,EAAM,WAAWD,GACVC;AAAA,EACX;AAAA,EACQ,IAAIC,GAAOC,GAAO;AACtB,gBAAK,IAAID,GACT,KAAK,IAAIC,GACF;AAAA,EACX;AAAA,EAEQ,YAAYH,GAAkB;AAClC,UAAMI,IAAYJ,IAAWV,EAAIU,GAAU,QAAQ,GAC7CG,IAAQ,CAAA,GAAWD,IAAQ;AAC/B,WAAAC,EAAA,MAAM,IAAId,EAAM,OAAO,CAACgB,GAAGC,IAAIN,IAAW,OACxCG,EAAE,KAAKG,CAAC,GACRN,KAAY,GAAGA,KAAY,GACpBK,IAAIC,IACZ,CAAC,IAAI,KAAK,CAAC,GACXlB,EAAA,QAAQ,SAA0BmB,GAAG;AAClC,MAAAL,EAAA,KAAK,KAAK,OAAOF,KAAY,IAAIO,IAAI,CAAC,EAAE,CAAC,CAAC,GAChCP,KAAA,IAAIO,GAAGP,KAAY;AAAA,IAAA,GAChC,CAAC,GAAGZ,CAAE,CAAC,GACL,KAAA,IAAIc,GAAGC,CAAC,GACNC;AAAA,EACX;AAAA,EACQ,cAAc;AACZ,UAAAI,IAAO,CAAC,CAAC;AACf,WAAO,KAAK,EAAE,MAAM,GAAG,EAAE,EAAE,YAAY,CAACH,GAAGC,MAAMD,IAAI,IAAIC,GAAG,KAAK,EAAE,YAAY,CAACD,GAAGC,GAAGC,MAAM;AACxF,YAAME,IAAID,EAAK,UAAU,CAACE,MAAMJ,IAAII,CAAC;AAChC,aAAAF,EAAA,OAAOC,GAAG,GAAGH,CAAC,GACZD,KAAK,IAAIE,KAAKE;AAAA,IAAA,GACtB,CAAC,CAAC;AAAA,EACT;AAAA,EAEA,IAAI,WAAW;AACJ,WAAA,KAAK,cAAL,KAAK,YAAc,KAAK,YAAY;AAAA,EAC/C;AAAA,EACA,IAAI,SAAST,GAAkB;AACtB,SAAA,YAAY,KAAK,YAAYA,CAAQ;AAAA,EAC9C;AAAA,EACA,OAAO;AACH,WAAO,IAAIF,EAAA,EAAQ,IAAI,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC;AAAA,EACnD;AAAA,EAEA,GAAGS,GAAW;AACV,WAAO,KAAK,EAAEA,CAAC,IAAI,IAAI,KAAK,EAAEA,CAAC;AAAA,EACnC;AAAA,EACA,KAAKI,GAAW;AACZ,UAAMN,IAAI,KAAK,EAAE,SAAUM,IAAI,IAAK,KAAK,CAAC;AACnC,WAAAN,IAAI,KAAK,IAAKM,IAAI,IAAK,KAAK,EAAEN,CAAC,KAAK;AAAA,EAC/C;AAAA,EAGA,UAAUO,GAAqC;AAC3C,eAAW,EAAE,GAAGC,GAAI,GAAGC,OAAQF,GAAQ;AACnC,YAAM,EAAE,GAAGG,GAAI,GAAGC,MAAO,KAAK;AAC3B,MAAAH,EAAA,QAAQ,CAACF,GAAGJ,MAAM;AACjB,aAAK,EAAEA,CAAC,IAAIQ,EAAGJ,CAAC,GACX,KAAA,EAAEJ,CAAC,KAAKS,EAAGL,CAAC,IAAIG,EAAGP,CAAC,KAAK;AAAA,MAAA,CACjC;AAAA,IACL;AACA,kBAAO,KAAK,WACL;AAAA,EACX;AAAA,EAEA,UAAU;AACN,UAAM,EAAE,GAAGQ,GAAI,GAAGC,MAAO,KAAK;AAC3B,WAAAD,EAAA,QAAQ,CAACJ,GAAGJ,MAAM;AACZ,WAAA,EAAEI,CAAC,IAAIJ,GACZ,KAAK,EAAEI,CAAC,KAAK,IAAIK,EAAGT,CAAC,KAAK;AAAA,IAAA,CAC7B,GACD,OAAO,KAAK,WACL;AAAA,EACX;AAAA,EAEA,QAAQ;AACJ,UAAM,EAAE,GAAGQ,GAAI,GAAGC,MAAO,KAAK;AAC9B,YAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,QAAQ,CAACL,GAAGJ,GAAGU,MAAM;AAC1C,WAAK,EAAEV,CAAC,IAAIU,EAAEF,EAAGJ,CAAC,CAAC,GACnB,KAAK,EAAEJ,CAAC,KAAK,IAAIS,EAAGL,CAAC,KAAK;AAAA,IAAA,CAC7B,GACD,OAAO,KAAK,WACL;AAAA,EACX;AACJ;AA/BIO,EAAA;AAAA,EADCzB;AAAA,GAxDCK,EAyDF,WAAA,UAAA,CAAA;AAYAoB,EAAA;AAAA,EADCzB;AAAA,GApECK,EAqEF,WAAA,WAAA,CAAA;AAUAoB,EAAA;AAAA,EADCzB;AAAA,GA9ECK,EA+EF,WAAA,SAAA,CAAA;AA/EJ,IAAMqB,IAANrB;ACfA,SAASsB,EAAKf,GAAW;AACrB,SAAO,OAAO,OAAOc,EAAM,KAAKd,CAAC,CAAC;AACtC;AACA,MAAMgB,IAAO;AAAA,EACT;AAAA,EAAG;AAAA,EAAU;AAAA,EACb;AAAA,EAAU;AAAA,EAAU;AAAA,EACpB;AAAA,EAAU;AAAA,EAAU;AAAA,EACpB;AAAA,EAAU;AAAA,EAAU;AAAA,EACpB;AAAA,EAAU;AAAA,EAAU;AAAA,EACpB;AAAA,EAAU;AAAA,EAAU;AAAA,EACpB;AAAA,EAAU;AAAA,EAAU;AAAA,EACpB;AAAA,EAAU;AAAA,EAAU;AACxB,EAAE,IAAID,CAAI;AACIC,EAAK,IAAI,CAACC,MAAOD,EAAKC,EAAG,KAAK,CAAC,CAAC,CAAC;AAC/C,MAAMC,IAAQ,MAAM,KAAK,EAAE,QAAQ,KAAK,CAACC,GAAGjB,MAAM,CAAC,GAAGc,CAAI,EAAE,KAAK,CAACI,GAAIC,MAAOD,EAAG,GAAGlB,CAAC,IAAImB,EAAG,GAAGnB,CAAC,CAAC,CAAC,GAC3F,CAACoB,GAAGC,IAAGC,EAAC,IAAI;AAAA,EACd,CAAC,IAAI,IAAI,CAAC;AAAA,EACV,CAAC,GAAG,GAAG,CAAC;AAAA,EACR,CAAC,GAAG,IAAI,EAAE;AACd,EAAE,IAAI,CAACZ,MAAMA,EAAE,IAAI,CAACN,MAAMU,EAAKV,CAAC,CAAC,CAAU,GACrC,CAACmB,IAAGC,IAAGC,IAAGC,IAAGC,IAAGC,EAAC,IAAI;AAAA,EACvB,CAAC,UAAU,UAAU,QAAQ;AAAA,EAC7B,CAAC,UAAU,UAAU,QAAQ;AAAA,EAC7B,CAAC,UAAU,UAAU,QAAQ;AAAA,EAC7B,CAAC,UAAU,UAAU,QAAQ;AAAA,EAC7B,CAAC,OAAO,QAAQ,MAAM;AAAA,EACtB,CAAC,SAAS,SAAS,MAAM;AAC7B,EAAE,IAAI,CAAChC,MAAMA,EAAE,IAAIiB,CAAI,CAAU;AAMjC,UAAUgB,EAAWC,GAAmCC,GAAkBjC,GAAYC,GAAY;AAC9F,aAAWiC,KAAQlB,GAAM;AACrB,UAAMmB,IAAY,OAAO,OAAOD,EAAK,OAAOF,CAAQ,CAAC;AACrD,eAAWI,KAAcpC,KAAM,OAA0BgB,IAAO,CAACE,EAAMlB,CAAC,EAAEmC,EAAU,KAAKlC,KAAKD,IAAI,CAAC,CAAC,CAAC,GAAG;AAC9F,YAAAJ,IAAQuC,EAAU,OAAOC,CAAU,GACnCC,IAAMzC,EAAM;AACd,MAAAqC,EAAI,IAAII,CAAG,MACfJ,EAAI,IAAII,CAAG,GACX,MAAM,EAAE,OAAAzC,GAAO,MAAAsC,GAAM,YAAAE,GAAY,UAAUC,EAAI;AAAA,IACnD;AAAA,EACJ;AACJ;AACA,UAAUC,GAAUN,GAAmChC,GAAYC,GAAY;AAC3E,SAAO8B,EAAWC,GAAU,oBAAI,IAAI,GAAGhC,GAAGC,CAAC;AAC/C;AACA,UAAUsC,EAAUP,GAAmC1B,GAAWN,GAAYC,GAAY;AAChF,QAAAgC,wBAAU;AACL,aAAA,CAACO,GAAG5C,CAAK,KAAK;AAAA,IACpBU,IAAI,KAAM0B;AAAA,IACV1B,IAAI,KAAM0B,EAAS,KAAA,EAAO,MAAM;AAAA,IAChC1B,IAAI,KAAM0B,EAAS,KAAA,EAAO,QAAQ;AAAA,IAClC1B,IAAI,KAAM0B,EAAS,OAAO,QAAQ,QAAQ;AAAA,EAC/C,EAAE;AACE,QAAKpC,KACD,CAAAqC,EAAI,IAAIrC,EAAM,QAAQ;AAC1B,iBAAW6C,KAAQV,EAAWnC,GAAOqC,GAAKjC,GAAGC,CAAC;AAC1C,cAAM,EAAE,GAAGwC,GAAM,OAAO,CAAC,EAAED,IAAI,IAAI,SAAS,CAAC,EAAEA,IAAI,GAAG;AAElE;AAEA,MAAME,IAAQ;AAAA,EACV,GAAGjB;AAAA,EAAG,GAAGC;AAAA,EAAG,GAAGC;AAAA,EACf,GAAGC;AAAA,EAAG,GAAGC;AAAA,EAAG,GAAGC;AAAA,EACf,GAAGR;AAAA,EAAG,GAAGC;AAAA,EAAG,GAAGC;AACnB;AACA,IAAKmB,sBAAAA,OACDA,EAAAC,EAAA,IAAA,CAAA,IAAA,KAAKD,EAAAC,EAAA,KAAA,CAAA,IAAA,MAAMD,EAAAC,EAAA,IAAA,IAAA,CAAA,IAAA,MACXD,EAAAC,EAAA,IAAA,CAAA,IAAA,KAAKD,EAAAC,EAAA,KAAA,CAAA,IAAA,MAAMD,EAAAC,EAAA,IAAA,IAAA,CAAA,IAAA,MACXD,EAAAC,EAAA,IAAA,CAAA,IAAA,KAAKD,EAAAC,EAAA,KAAA,CAAA,IAAA,MAAMD,EAAAC,EAAA,IAAA,IAAA,CAAA,IAAA,MACXD,EAAAC,EAAA,IAAA,CAAA,IAAA,KAAKD,EAAAC,EAAA,KAAA,EAAA,IAAA,MAAMD,EAAAC,EAAA,IAAA,IAAA,EAAA,IAAA,MACXD,EAAAC,EAAA,IAAA,EAAA,IAAA,KAAKD,EAAAC,EAAA,KAAA,EAAA,IAAA,MAAMD,EAAAC,EAAA,IAAA,IAAA,EAAA,IAAA,MACXD,EAAAC,EAAA,IAAA,EAAA,IAAA,KAAKD,EAAAC,EAAA,KAAA,EAAA,IAAA,MAAMD,EAAAC,EAAA,IAAA,IAAA,EAAA,IAAA,MACXD,EAAAC,EAAA,IAAA,EAAA,IAAA,KAAKD,EAAAC,EAAA,KAAA,EAAA,IAAA,MAAMD,EAAAC,EAAA,IAAA,IAAA,EAAA,IAAA,MACXD,EAAAC,EAAA,IAAA,EAAA,IAAA,KAAKD,EAAAC,EAAA,KAAA,EAAA,IAAA,MAAMD,EAAAC,EAAA,IAAA,IAAA,EAAA,IAAA,MACXD,EAAAC,EAAA,IAAA,EAAA,IAAA,KAAKD,EAAAC,EAAA,KAAA,EAAA,IAAA,MAAMD,EAAAC,EAAA,IAAA,IAAA,EAAA,IAAA,MATVD,IAAAA,KAAA,CAAA,CAAA;AAYL,UAAUE,EAAmBC,GAAa;AAC3B,aAAA,CAACC,CAAI,KAAK,OAAO,UAAU,SAAS,KAAKD,GAAK,mBAAmB;AACxE,UAAMH,EAAUI,CAAW;AACnC;AACA,UAAUC,GAAcF,GAAa;AACtB,aAAAG,KAASJ,EAAmBC,CAAG;AACtC,UAAMJ,EAAMO,CAAK;AACzB;AC1FA,MAAMC,KAAmC,OAAO,YAAYR,EAAM,IAAI,CAAC,EAAE,UAAA/C,EAAS,GAAGO,MAAM,CAACP,GAAUO,CAAC,CAAC,CAAC,GAEnGiD,KAAc;AAAA,EAChB;AAAA,EAAI;AAAA,EAAI;AAAA,EACR;AAAA,EAAG;AAAA,EAAG;AAAA,EACN;AAAA,EAAG;AAAA,EAAG;AAAA,EACN;AAAA,EAAG;AAAA,EAAG;AAAA,EACN;AAAA,EAAI;AAAA,EAAI;AAAA,EACR;AAAA,EAAI;AAAA,EAAI;AAAA,EACR;AAAA,EAAI;AAAA,EAAI;AAAA,EACR;AAAA,EAAI;AAAA,EAAI;AAAA,EACR;AAAA,EAAI;AAAA,EAAI;AACZ,GACMC,KAAgB;AAAA,EAClB;AAAA,EAAG;AAAA,EAAG;AAAA,EACN;AAAA,EAAG;AAAA,EAAG;AAAA,EACN;AAAA,EAAG;AAAA,EAAG;AAAA,EACN;AAAA,EAAI;AAAA,EAAI;AAAA,EACR;AAAA,EAAI;AAAA,EAAI;AAAA,EACR;AAAA,EAAI;AAAA,EAAI;AAAA,EACR;AAAA,EAAI;AAAA,EAAI;AAAA,EACR;AAAA,EAAI;AAAA,EAAI;AAAA,EACR;AAAA,EAAI;AAAA,EAAI;AACZ,GACMC,IAAiB;AAAA,EACnB,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,EAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,EAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,EACzD,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,EAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,EAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,EACzD,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,EAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,EAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,EACzD,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,EAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,EAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,EACzD,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,EAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,EAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,EACzD,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,EAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,EAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,EACzD,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,EAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,EAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,EACzD,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,EAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,EAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC7D,EAAE;AAAA,EAAI,CAACC,MACH,CAAC,GAAGA,GAAG,GAAGA,EAAE,MAAM,GAAG,CAAC,EAAE,IAAI,CAACjD,MAAMA,IAAI,CAAC,CAAC,EACpC,QAAQ,CAACA,MAAM,CAACA,IAAI,GAAGA,IAAI,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;AACrD,GAEMkD,IAAY,MAAM,KAAK,EAAE,QAAQ,GAAA,GAAM,CAACC,GAAItD,MAAMc,EAAK,IAAI,CAACf,MAAMA,EAAE,KAAKC,CAAC,CAAC,CAAC,GAC5EuD,KAAUF,EAAU,CAAC,GACrBG,KAAWH,EAAU,IAAI,CAACI,GAAGzD,MAAMyD,EAAEzD,CAAC,CAAC,GACvC0D,KAAa;AAAA,EACf;AAAA,EAAG;AAAA,EAAI;AAAA,EACP;AAAA,EAAG;AAAA,EAAG;AAAA,EACN;AAAA,EAAI;AAAA,EAAI;AAAA,EACR;AAAA,EAAI;AAAA,EAAI;AAAA,EACR;AAAA,EAAG;AAAA,EAAG;AAAA,EACN;AAAA,EAAG;AAAA,EAAI;AACX;AAEA,SAASC,EAAIpB,GAAgBqB,GAAiB;AACrC,EAAArB,EAAA,QAAQ,CAACpC,GAAGH,MAAMuC,EAAKvC,CAAC,IAAI4D,EAAMzD,CAAC,CAAC;AAC7C;;AAEA,MAAM0D,IAAN,MAAMA,EAAM;AAAA,EAAZ;AACI,IAAAC,EAAA,MAAAC,GAAA;AAAA;AAAA,EACA,OAAO,KAAKxB,GAAyB;AAC3B,UAAAyB,IAAQ,IAAIH;AAClB,WAAI,OAAOtB,KAAS,WAChB0B,EAAAD,GAAMD,GAAQ,CAAC,GAAGpB,EAAmBJ,CAAI,CAAC,KAE1C0B,EAAAD,GAAMD,GAAQxB,IACXyB;AAAA,EACX;AAAA,EAEA,KAAKhC,GAAc;AACf2B,WAAAA,EAAIO,EAAA,MAAKH,IAAOZ,EAAenB,CAAI,CAAC,GAC7B;AAAA,EACX;AAAA,EACA,WAAWE,GAAoB;AAC3ByB,WAAAA,EAAIO,EAAA,MAAKH,IAAOZ,EAAeI,GAAQrB,CAAU,CAAC,CAAC,GAC5C;AAAA,EACX;AAAA,EACA,QAAQF,GAAc;AAClB2B,WAAAA,EAAIO,EAAA,MAAKH,IAAOZ,EAAenB,CAAI,CAAC,GACpC2B,EAAIO,EAAA,MAAKH,IAAOZ,EAAeK,GAASxB,CAAI,CAAC,CAAC,GACvC;AAAA,EACX;AAAA,EACA,QAAQ;AACA2B,WAAAA,EAAAO,EAAA,MAAKH,IAAOd,EAAW,GACpB;AAAA,EACX;AAAA,EACA,UAAU;AACNU,WAAAA,EAAIO,EAAA,MAAKH,GAAM,QAAQ,GAAGb,EAAa,GAChC;AAAA,EACX;AAAA,EACA,KAAKZ,GAAW;AACZ,QAAIsB,IAAQ;AACN,iBAAA;AAAA,MAAK,EAAE,QAAQM,EAAA,MAAKH,GAAM,OAAO;AAAA,MACnC,CAAC5D,IAAYmC,IAAI,OAAOA,MAAM,GAAGnC;AAAA,IAAA,EACnC,QAAQ,CAACgE,GAAGnE,MAAM;;AACZ,UAAAG,IAAI+D,EAAA,MAAKH,GAAM/D,CAAC;AAEpB,UADAG,MAAIiE,IAAAjB,EAAeS,CAAK,MAApB,gBAAAQ,EAAwBjE,OAAMA,GAC9BA,KAAK;AAAW,eAAA+D,EAAA,MAAKH,GAAM/D,CAAC,IAAIG;AAChC,MAAAgE,IAAK,CAAC,EAAEhE,IAAI,OAAKyD,IAAQP,EAAUO,CAAK,EAAEF,GAAWvD,CAAC,CAAC,IAC3D+D,EAAA,MAAKH,GAAM/D,CAAC,IAAImE,IAAI,IAAIhE,IAAI;AAAA,IAAA,CAC/B,GACM;AAAA,EACX;AAAA,EACA,UAAU;AACN,WAAO+D,EAAA,MAAKH;AAAA,EAChB;AAAA,EACA,WAAW;AACA,WAAAG,EAAA,MAAKH,GAAM,IAAI,CAAC5D,MAAMsC,EAAUtC,CAAC,CAAC,EAAE,KAAK,EAAE;AAAA,EACtD;AACJ;AAlDI4D,IAAA;AADJ,IAAMM,IAANR;ACvDO,MAAMS,IAAM,QAAQ,MAAM,OAAO,cAAc,QAAQ;AAAA,EAC1D;AAAA,EAAI;AAAA;AAAA,EAAY;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAChE;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EACpC;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EACxB;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EACpG;AAAA;AAAA,EAAY;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EACxB;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AAAA,EAC1H;AAAA,EAAK;AAAA,EAAK;AAAA,EAAK;AACnB,CAAC,GACYC,IAAU,KAAK,KAAK,KAAK,IAAI,QAAQ,IAAI,KAAK,IAAID,EAAI,MAAM,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GCPpE,EAAE,QAAAE,GAAW,IAAAF,GACbG,KAAM,OAAO,YAAY,CAAC,GAAGH,CAAG,EAAE,IAAI,CAACnE,GAAGH,MAAM,CAACG,GAAGH,CAAC,CAAC,CAAC;AAE7D,SAAS0E,EAAKC,GAAW;AACrB,SAAO,CAAC,GAAGA,CAAC,EAAE,YAAY,CAAC7E,GAAGC,MAAMD,IAAI0E,KAASC,GAAI1E,CAAC,GAAG,CAAC;AAC9D;AACA,UAAU6E,GAAOD,GAAW3F,GAAW6F,GAAW;AAC9C,WAAS7E,IAAI,GAAGA,IAAI2E,EAAE,QAAQ3E,KAAKhB,IAAI6F;AACnC,UAAM,CAACF,EAAE,MAAM3E,GAAGA,IAAIhB,CAAC,GAAG2F,EAAE,MAAM3E,IAAIhB,GAAGgB,IAAIhB,IAAI6F,CAAC,CAAC;AAC3D;AAEA,MAAMC,IAAOnB,EAAI,SAAS,GACpBpB,IAAO,OAAO,YAAY,aAAa;AACzC,MAAIwC,IAAUC;AACd,aAAW,CAACR,GAAQxE,CAAC,KAAKmC,IAAK;AAC3B,UAAM8C,IAAMjF,IAAIuE,IAAW,GAAGW,IAAK,CAAC,EAAElF,IAAIuE,KAAW,GAAGY,IAAKF,IAAKC,GAAIzB,IAAIe,IAASW;AACxE,eAAA,CAACC,GAAGjF,CAAC,KAAKyE,GAAOG,EAAQ,MAAM,GAAGtB,CAAC,GAAGwB,GAAIC,CAAE;AAC7C,YAAA,CAACR,EAAKU,CAAC,GAAG,OAAO,OAAOC,GAAIlF,CAAC,CAAC,CAAC;AAC/B,IAAA4E,IAAAA,EAAQ,MAAMtB,CAAC;AAAA,EAC7B;AACJ,EAAA,CAAG;AACHlB,EAAK,CAAC,IAAI;AAEV,MAAe+C,KAAA;AAAA,EACX,KAAK,OAAO,OAAO3B,EAAI,IAAIe,CAAI,CAAC;AAAA,EAChC,OAAO,OAAO,OAAOnC,CAAI;AAC7B;AAEA,SAAS8C,GAAIlF,GAAW;AACb,SAAA,CAAC,GAAI,WAAWC,GAAG;AACnB;AAAE,YAAOA,IAAI0E,IAAQ;AAAA,WAAa1E,IAAI,KAAK,MAAMA,IAAI0E,CAAI;AAAA,EAAA,EAC7DJ,EAAKvE,CAAC,CAAC,CAAC;AACf;AC9BA,SAASoF,GAAM7F,GAAkB;AACvB,QAAA,EAAE,KAAAiE,GAAK,OAAAK,EAAU,IAAAsB;AACvB,WAAS,EAAE,OAAO,EAAE,UAAA7F,EAAA,GAAY,OAAA+F,GAAO,SAAAC,GAAS,MAAAzD,GAAM,YAAAE,EAAW,KAAKG,EAAU3C,GAAO,EAAE,GAAG;AACxF,QAAI,EAAED,KAAYuE;AACd;AAEJ,UAAMuB,IAAQlB,EAAM,KAAKL,EAAMvE,CAAQ,EAAE,IAAI,CAACU,MAAM6C,GAASW,EAAIxD,CAAC,CAAC,CAAC,CAAC;AACrE,WAAIsF,IACAzD,IAAOA,EAAK,aAEZuD,EAAM,QAAQ,GACPvD,IAAAE,IAEPsD,MACAD,EAAM,MAAM,GACZvD,IAAOA,EAAK,UAETuD,EAAM,KAAKvD,EAAK,GAAG,CAAC,CAAC;AAAA,EAChC;AACO,SAAA;AACX;;AAEA,MAAMzC,IAAN,MAAMA,EAAM;AAAA,EAAZ;AACI,IAAAuE,EAAA,MAAAC,GAAQ2B,EAAU,KAAK,CAAC;AAAA;AAAA,EASxB,OAAO,KAAKjG,GAAkB;AACpB,UAAAC,IAAQ,IAAI;AACZ,WAAAuE,EAAAvE,GAAAqE,GAAQ2B,EAAU,KAAKjG,CAAQ,IAC9BC;AAAA,EACX;AAAA,EACA,IAAI,WAAW;AACX,WAAOwE,EAAA,MAAKH,GAAM;AAAA,EACtB;AAAA,EACA,eAAe;AACL,UAAA,EAAE,GAAApE,GAAG,GAAAC,EAAE,IAAIkB,EAAKoD,EAAA,MAAKH,GAAM,GAAG,CAAC,CAAC;AAC3B,eAAA/D,KAAKL,EAAE,KAAK;AAAG,UACtBuE,EAAA,MAAKH,GAAM,EAAE/D,CAAC,MAAML,EAAEK,CAAC,KACvBkE,EAAA,MAAKH,GAAM,EAAE/D,CAAC,MAAMJ,EAAEI,CAAC;AAClB,eAAA;AACF,WAAA;AAAA,EACX;AAAA,EACA,CAAC,UAAUI,GAAWN,GAAYC,GAAY;AAC1C,eAAW,EAAE,OAAOkC,GAAW,OAAAuD,GAAO,SAAAC,GAAS,MAAAzD,GAAM,YAAAE,EAAgB,KAAAG,EAAU6B,EAAA,MAAKH,IAAO3D,GAAGN,GAAGC,CAAC,GAAG;AAC3F,YAAAL,IAAQ,IAAIH;AAClB,MAAA0E,EAAAvE,GAAMqE,GAAQ9B,IACR,MAAA;AAAA,QACF,OAAAvC;AAAA,QACA,OAAA8F;AAAA,QACA,SAAAC;AAAA,QACA,MAAMzD,EAAK,GAAG,CAAC;AAAA,QACf,YAAYE,EAAW,GAAG,CAAC;AAAA,MAAA;AAAA,IAEnC;AAAA,EACJ;AAAA,EACA,CAAC,UAAUpC,GAAYC,GAAY;AACpB,eAAA,EAAE,OAAOkC,GAAW,MAAAD,GAAM,YAAAE,EAAA,KAAgBE,GAAU8B,EAAA,MAAKH,IAAOjE,GAAGC,CAAC,GAAG;AACxE,YAAAL,IAAQ,IAAIH;AAClB,MAAA0E,EAAAvE,GAAMqE,GAAQ9B,IACR,MAAA;AAAA,QACF,OAAAvC;AAAA,QACA,MAAMsC,EAAK,GAAG,CAAC;AAAA,QACf,YAAYE,EAAW,GAAG,CAAC;AAAA,MAAA;AAAA,IAEnC;AAAA,EACJ;AAAA,EACA,OAAO;AACG,UAAAxC,IAAQ,IAAIH;AACZ,WAAA0E,EAAAvE,GAAAqE,GAAQG,EAAA,MAAKH,GAAM,KAAK,IACvBrE;AAAA,EACX;AAAA,EACA,GAAGM,GAAW;AACH,WAAAkE,EAAA,MAAKH,GAAM,GAAG/D,CAAC;AAAA,EAC1B;AAAA,EACA,KAAKI,GAAW;AACL,WAAA8D,EAAA,MAAKH,GAAM,KAAK3D,CAAC;AAAA,EAC5B;AAAA,EAGA,UAAUC,GAA4B;;AAClC,mBAAQ,MAAMqF,EAAU,UAAU,QAAQxB,EAAA,MAAKH,IAAO,CAAC,GAAG4B,EAAAvB,IAAA7E,GAAMqG,GAAAC,GAAN,KAAAzB,GAAmB/D,EAAO,CAAC,GAC9E;AAAA,EACX;AAAA,EACA,UAAU;AACN,WAAA6D,EAAA,MAAKH,GAAM,WACJ;AAAA,EACX;AAAA,EACA,QAAQ;AACJ,WAAAG,EAAA,MAAKH,GAAM,SACJ;AAAA,EACX;AAAA,EACA,MAAM+B,GAAc;AACV,UAAA9B,IAAQuB,GAAMrB,EAAA,MAAKH,EAAK;AAC9B,WAAKC,KACD,UAAU,UAAQA,EAAM,KAAK8B,CAAI,GAC9B9B,EAAM,cAFM;AAAA,EAGvB;AACJ;AAhFID,IAAA,eACQ6B,IAAA,eAAAC,eAAaxF,GAA4B;AAC7C,aAAWX,KAASW;AAChB,IAAIX,aAAiBH,IACjB,MAAM2E,EAAAxE,GAAMqE,KAEZ,OAAOjB,GAAcpD,CAAK;AAEtC,GAPAoE,EAFEvE,GAEMqG;AAFZ,IAAMhF,IAANrB;"}